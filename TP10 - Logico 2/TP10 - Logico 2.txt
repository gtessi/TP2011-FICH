1)

factorial(0,1).
factorial(X,F):- X1 is X-1, factorial(X1,F1), F is X * F1.

2)

contar([],0,0).
contar([X|C],P,I):- integer(X), R is X mod 2,
                                (R = 1, contar(C,P,I1), I is I1+1;
                                R = 0, contar(C,P1,I), P is P1+1).

3)

sumar([],0).
sumar([X|C],R):- sumar(C,R1), R is R1 + X.

4)

concatenar([],L,L).
concatenar([X|C],L2,[X|L]):- concatenar(C,L2,L).

aplanar([],[]).
aplanar([X|C],L):- X = [_|_], aplanar(X,LX), aplanar(C,LC), concatenar(LX,LC,L), !;
                   aplanar(C,LC), concatenar([X],LC,L).

5)

longitud([],0).
longitud([_|C],X):- longitud(C,X1), X is X1+1.

sumar([],[],[]).
sumar([X1|L1],[X2|L2],[R|L]):- longitud(L1,N1), longitud(L2,N2), N1=N2, R is X1+X2, sumar(L1,L2,L).

6)

profu([],0).
profu([_],1).
profu([I,_,D],H):-profu(I,R1),profu(D,R2),H1 is R1+1,H2 is R2+1,H is max(H1, H2).

7)

profu([],0).
profu([_],1).
profu([I,_,D],H):-profu(I,R1),profu(D,R2),H1 is R1+1,H2 is R2+1,H is max(H1, H2).

amp([],_,0):-!.
amp(_,0,1):-!.
amp([_],_,0):-!.
amp([I,_,D],N,Amp):-N1 is N-1,amp(I,N1,Aizq),amp(D,N1,Ader),Amp is Aizq+Ader.

concatenar([],L,L).
concatenar([X|C],L2,[X|L]):-concatenar(C,L2,L).

amps(T,N,[]):-profundidad(T,P),N = P,!.
amps(T,N,L):-profundidad(T,P),N < P,N1 is N+1,amp(T,N,A),amps(T,N1,L1),concatenar([A],L1,L).

amplitMax(T,M):-amps(T,0,L),max_list(L,M).

%-------------------------------------------
%Con listas
%-------------------------------------------

buscar([],0):-!.
buscar(L,A):-longitud(L,Aa),exp(L,Le),buscar(Le,Ae),A is max(Aa,Ae).

exp([],[]):-!.
exp([X|L],[I|Le]):-X=[I,N,[]],!,exp(L,Le).
exp([X|L],[D|Le]):-X=[[],N,D],!,exp(L,Le).
exp([X|L],[I,D|Le]):-X=[I,N,D],!,exp(L,Le).
exp([X|L],Le):-exp(L,Le).

longitud([],0).
longitud([_|C],X):-longitud(C,X1),X is X1+1.

8)

borrar(X,[X|C],C).
borrar(X,[Y|C],[Y|R]):-borrar(X,C,R).

permutar([],[]).
permutar(L,[X|C]):-borrar(X,L,R),permutar(R,C).

9)

reinas([[3,4],[5,4],[5,3]]).

pertenece(X,[X|_]):-!.
pertenece(X,[_|L]):-pertenece(X,L).

reina(X,Y):-reinas(Reinas),pertenece([X,Y],Reinas).

afuera(X,Y):-X > 8;X < 1;Y > 8;Y < 1.

validar(X,Y,_):-reina(X,Y),!,write('casilla ocupada'),fail.
validar(X,Y,_):-afuera(X,Y),!,write('celda fuera del rango'),fail.
validar(X,Y,R):-validarDir(X,Y,0,1,Rn),append([],Rn,R1),
                validarDir(X,Y,1,1,Rne),append(R1,Rne,R2),
                validarDir(X,Y,1,0,Re),append(R2,Re,R3),
                validarDir(X,Y,1,-1,Rse),append(R3,Rse,R4),
                validarDir(X,Y,0,-1,Rs),append(R4,Rs,R5),
                validarDir(X,Y,-1,-1,Rso),append(R5,Rso,R6),
                validarDir(X,Y,-1,0,Ro),append(R6,Ro,R7),
                validarDir(X,Y,-1,1,Rno),append(R7,Rno,R).

validarDir(X,Y,_,_,[]):-afuera(X,Y),!.
validarDir(X,Y,Dx,Dy,[[X,Y]|R1]):-reina(X,Y),!,Y1 is Y+Dy,X1 is X+Dx,validarDir(X1,Y1,Dx,Dy,R1).
validarDir(X,Y,Dx,Dy,R1):-Y1 is Y+Dy,X1 is X+Dx,validarDir(X1,Y1,Dx,Dy,R1).